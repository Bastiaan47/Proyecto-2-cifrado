import numpy as np
import sounddevice as sd
from scipy.io import wavfile
from scipy.fft import fft
from scipy.spatial.distance import euclidean
import speech_recognition as sr

def grabar_audio(duration=5, sample_rate=44100, guardar_como=None):
    try:
        print("Comienza la grabaci贸n...")
        audio_data = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float64')
        sd.wait()
        print("Grabaci贸n completa.")
        audio_data = audio_data.flatten()

        if guardar_como is not None:
            audio_data_16bit = (audio_data * 32767).astype(np.int16)
            wavfile.write(guardar_como, sample_rate, audio_data_16bit)
            print(f"Audio guardado como {guardar_como}")

        return audio_data
    except Exception as e:
        print(f"Error al grabar el audio: {e}")
        return None

def calcular_huella_espectral(audio_data): #calculo fft
    fft_data = np.abs(fft(audio_data))
    huella = fft_data[:len(fft_data) // 2]
    huella_normalizada = huella / np.max(huella)
    return huella_normalizada

def comparar_huellas(huella1, huella2, tolerancia=20): #intenta mover la tolerancia si te da fallos o para arreglar esta parte de que  no coinciden
    distancia = euclidean(huella1, huella2)
    print(f"Distancia calculada entre huellas: {distancia}")
    return distancia <= tolerancia

def transcribir_audio(archivo_wav, archivo_txt):
    recognizer = sr.Recognizer()
    try:
        with sr.AudioFile(archivo_wav) as source:
            audio = recognizer.record(source)
            texto = recognizer.recognize_google(audio, language='es-ES')
            with open(archivo_txt, 'w') as f:
                f.write(texto)
            print(f"Transcripci贸n guardada en {archivo_txt}")
    except Exception as e:
        print(f"Error al transcribir el audio: {e}")

print("Grabando la clave original...")
audio_original = grabar_audio(duration=5, guardar_como="original.wav")
if audio_original is not None:
    huella_original = calcular_huella_espectral(audio_original)
    transcribir_audio("original.wav", "transcripcion_original.txt")
    while True:
        print("Grabando clave para descifrado...")
        audio_descifrado = grabar_audio(duration=5, guardar_como="descifrado.wav")
        if audio_descifrado is not None:
            huella_descifrado = calcular_huella_espectral(audio_descifrado)
            transcribir_audio("descifrado.wav", "transcripcion_descifrado.txt")

            # Comparar huellas
            if comparar_huellas(huella_original, huella_descifrado):
                print("Las huellas coinciden. Procediendo al descifrado...")
                break
            else:
                print("La huella de la clave no coincide. Repitiendo la grabaci贸n de descifrado...")
else:
    print("No se pudo obtener la huella de la clave original.")

