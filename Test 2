import sounddevice as sd
import numpy as np
import matplotlib.pyplot as plt
from scipy.io.wavfile import write
from scipy.signal import spectrogram
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend

def grabar_y_procesar_muestra(duration=7, sample_rate=44100, threshold=0.02, block_size=1024, archivo=None):
    print("comienza la grabación...")
    audio_data= sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float64')
    sd.wait()
    print("grabación completa.")
    
    audio_data= audio_data.flatten()
    if np.max(np.abs(audio_data)) == 0:
        print("Error: Audio sin señal.")
        return None

    audio_data= audio_data / np.max(np.abs(audio_data))  # Normalización
    voice_blocks= [audio_data[i:i + block_size] for i in range(0, len(audio_data), block_size)
                    if np.max(np.abs(audio_data[i:i + block_size])) > threshold]

    if not voice_blocks:
        print("no se detectó actividad de voz.")
        return None

    voice_segments= np.concatenate(voice_blocks)
    if archivo:
        write(archivo, sample_rate, (voice_segments * 32767).astype(np.int16))
    f, t, Sxx= spectrogram(voice_segments, sample_rate)

    #reemplazar NaN e infinitos con 0
    Sxx= np.nan_to_num(Sxx, nan=0.0, posinf=0.0, neginf=0.0)
    return Sxx


def generar_clave_espectrograma(Sxx, key_size=32):
    clave= (np.abs(Sxx).mean(axis=0)[:key_size] * 255).astype(np.uint8)
    return clave.tobytes()


def claves_similares(clave1, clave2, tolerancia=5):
    if len(clave1) != len(clave2):
        return False
    distancia= sum(bin(b1 ^ b2).count('1') for b1, b2 in zip(clave1, clave2))
    return distancia <= tolerancia

def cifrar_archivo(archivo_entrada, archivo_salida, clave):
    with open(archivo_entrada, 'rb') as f:
        datos= f.read()
    iv= np.random.bytes(16)
    cipher= Cipher(algorithms.AES(clave), modes.CFB(iv), backend=default_backend())
    encryptor= cipher.encryptor()
    datos_cifrados= iv + encryptor.update(datos) + encryptor.finalize()
    with open(archivo_salida, 'wb') as f:
        f.write(datos_cifrados)

def descifrar_archivo(archivo_entrada, archivo_salida, clave):
    with open(archivo_entrada, 'rb') as f:
        datos_cifrados= f.read()
    iv= datos_cifrados[:16]
    datos= datos_cifrados[16:]
    cipher= Cipher(algorithms.AES(clave), modes.CFB(iv), backend=default_backend())
    decryptor= cipher.decryptor()
    datos_descifrados= decryptor.update(datos) + decryptor.finalize()
    with open(archivo_salida, 'wb') as f:
        f.write(datos_descifrados)

archivo_original= "archivo_original.txt"
archivo_cifrado= "archivo_cifrado.txt"
archivo_descifrado= "archivo_descifrado.txt"

claves= []
print("Grabando claves para cifrado...")
for i in range(3):
    Sxx= grabar_y_procesar_muestra(duration=5, archivo=f"clave_{i+1}.wav")
    if Sxx is not None:
        clave = generar_clave_espectrograma(Sxx)
        claves.append(clave)
    else:
        print(f"No se pudo generar la clave {i+1}")
        exit()

#usar la primera clave para cifrar
cifrar_archivo(archivo_original, archivo_cifrado, claves[0])
print("Archivo cifrado con la primera clave.")

#grabar la cuarta muestra y comparar
print("Grabando clave para descifrado...")
Sxx_cuarta= grabar_y_procesar_muestra(duration=5, archivo="clave_4.wav")
if Sxx_cuarta is not None:
    clave_cuarta = generar_clave_espectrograma(Sxx_cuarta)

    for i, clave_original in enumerate(claves):
        if claves_similares(clave_original, clave_cuarta):
            print(f"La clave generada coincide con la clave {i+1}. Intentando descifrar...")
            try:
                descifrar_archivo(archivo_cifrado, archivo_descifrado, clave_original)
                print(f"Archivo descifrado correctamente usando la clave {i+1}.")
                break
            except Exception as e:
                print(f"Error al descifrar con la clave {i+1}: {e}")
    else:
        print("La clave generada no coincide con ninguna de las claves originales.")
else:
    print("No se pudo generar la clave de descifrado.")
