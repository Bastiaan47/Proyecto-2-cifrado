import tkinter as tk
from tkinter import filedialog, messagebox
import numpy as np
import sounddevice as sd
from scipy.io import wavfile
from scipy.fft import fft
from scipy.spatial.distance import euclidean
import speech_recognition as sr
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import os

def grabar_audio(duration=5, sample_rate=44100, guardar_como=None):
    try:
        print("comienza la grabación...")
        audio_data= sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1, dtype='float64')
        sd.wait()
        print("grabación completa.")
        audio_data = audio_data.flatten()

        if guardar_como is not None:
            audio_data_16bit= (audio_data * 32767).astype(np.int16)
            wavfile.write(guardar_como, sample_rate, audio_data_16bit)
            print(f"audio guardado como {guardar_como}")

        return audio_data
    except Exception as e:
        print(f"error al grabar el audio: {e}")
        return None

def calcular_huella_espectral(audio_data):
    fft_data= np.abs(fft(audio_data))
    huella= fft_data[:len(fft_data) // 2]
    huella_normalizada= huella/np.max(huella)
    return huella_normalizada

def comparar_huellas(huella1, huella2, tolerancia=15):
    distancia= euclidean(huella1, huella2)
    print(f"distancia calculada entre huellas: {distancia}")
    return distancia <= tolerancia

def transcribir_audio_en_memoria(archivo_wav):
    recognizer= sr.Recognizer()
    try:
        with sr.AudioFile(archivo_wav) as source:
            audio= recognizer.record(source)
            texto= recognizer.recognize_google(audio, language='es-ES')
            return texto
    except Exception as e:
        print(f"error al transcribir el audio: {e}")
        return None

def texto_a_matriz_numerica(texto):
    try:
        matriz= np.array([[ord(char) for char in line] for line in texto.splitlines()])
        return matriz
    except Exception as e:
        print(f"error al convertir el texto a matriz numrrica: {e}")
        return None

def matriz_a_clave(matriz):
    clave_bytes= matriz.flatten().astype(np.uint8).tobytes()
    clave_bytes= (clave_bytes * (32 // len(clave_bytes) + 1))[:32]
    return clave_bytes

def encriptar_archivo(nombre_archivo, matriz_clave, archivo_salida):
    try:
        with open(nombre_archivo, 'rb') as f:
            datos= f.read()

        clave= matriz_a_clave(matriz_clave)
        cipher= AES.new(clave, AES.MODE_CBC)
        iv= cipher.iv
        datos_cifrados= cipher.encrypt(pad(datos, AES.block_size))

        with open(archivo_salida, 'wb') as f:
            f.write(iv + datos_cifrados)
        print(f"archivo cifrado guardado en {archivo_salida}")
        messagebox.showinfo("exito", "Archivo encriptado correctamente.")
    except Exception as e:
        print(f"error al cifrar el archivo: {e}")

def desencriptar_archivo(nombre_archivo_cifrado, matriz_clave_descifrado, archivo_salida):
    try:
        with open(nombre_archivo_cifrado, 'rb') as f:
            contenido= f.read()

        iv= contenido[:16]
        datos_cifrados= contenido[16:]
        clave_descifrado= matriz_a_clave(matriz_clave_descifrado)

        cipher= AES.new(clave_descifrado, AES.MODE_CBC, iv)
        datos_descifrados= unpad(cipher.decrypt(datos_cifrados), AES.block_size)

        with open(archivo_salida, 'wb') as f:
            f.write(datos_descifrados)
        print(f"Archivo descifrado guardado en {archivo_salida}")
        messagebox.showinfo("Éxito", "Archivo desencriptado correctamente.")
    except Exception as e:
        print(f"Error al descifrar el archivo: {e}")

#interfaz
def seleccionar_archivo():
    global archivo_a_cifrar
    archivo_a_cifrar = filedialog.askopenfilename(title="Seleccionar archivo")
    if archivo_a_cifrar:
        lbl_archivo.config(text=f"Archivo seleccionado: {os.path.basename(archivo_a_cifrar)}")

def grabar_clave_encriptado():
    audio = grabar_audio(guardar_como="clave_encriptado.wav")
    if audio is not None:
        global huella_original
        huella_original = calcular_huella_espectral(audio)
        texto = transcribir_audio_en_memoria("clave_encriptado.wav")
        global matriz_original
        matriz_original = texto_a_matriz_numerica(texto) if texto else None
        messagebox.showinfo("Éxito", "Clave de encriptado grabada correctamente.")

def encriptar():
    if archivo_a_cifrar and matriz_original is not None:
        encriptar_archivo(archivo_a_cifrar, matriz_original, "archivo_cifrado.aes")
    else:
        messagebox.showerror("Error", "Selecciona un archivo y graba la clave para encriptar.")

def grabar_clave_desencriptado():
    audio = grabar_audio(guardar_como="clave_desencriptado.wav")
    if audio is not None:
        huella_descifrado = calcular_huella_espectral(audio)
        if comparar_huellas(huella_original, huella_descifrado):
            texto = transcribir_audio_en_memoria("clave_desencriptado.wav")
            matriz_descifrado = texto_a_matriz_numerica(texto) if texto else None
            desencriptar_archivo("archivo_cifrado.aes", matriz_descifrado, "archivo_descifrado.txt")
        else:
            messagebox.showerror("Error", "Las huellas de las claves no coinciden.")

#UI

root = tk.Tk()
root.title("Encriptador de Archivos con Audio")
root.geometry("400x300")

btn_seleccionar_archivo = tk.Button(root, text="Seleccionar archivo para encriptar", command=seleccionar_archivo)
btn_seleccionar_archivo.pack(pady=10)

lbl_archivo = tk.Label(root, text="No se ha seleccionado ningún archivo")
lbl_archivo.pack()

btn_grabar_clave_encriptado = tk.Button(root, text="Grabar clave de encriptado", command=grabar_clave_encriptado)
btn_grabar_clave_encriptado.pack(pady=10)

btn_encriptar = tk.Button(root, text="Encriptar archivo", command=encriptar)
btn_encriptar.pack(pady=10)

btn_grabar_clave_desencriptado = tk.Button(root, text="Grabar clave de desencriptado", command=grabar_clave_desencriptado)
btn_grabar_clave_desencriptado.pack(pady=10)

root.mainloop()

